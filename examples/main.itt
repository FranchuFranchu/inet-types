:(a b) ~ :(a b)
::(a) ~ ::(a)

#[ 
	Define the boolean type.
	These two lines say that:
	Bool.true: Bool
	Bool.false: Bool
]

::(:(Bool Type)) ~ Bool
::(:(Nat Type)) ~ Nat
::(:(~Erasure Type)) ~ ~Erasure
::(:(~Duplication Type)) ~ ~Duplication

::(:(Bool.true Bool)) ~ Bool.true
::(:(Bool.false Bool)) ~ Bool.false

#[
	Define an agent that consumes Bools.
	It is of type ~Bool.

	~Bool is the type that all agents that interact with Bool share.
	It is the supertype of the types of all agents that interact with Bool.

	By saying Bool.not: ~Bool, we're making a weak assertion about Bool.not
	We're saying that the only thing we know about it is that it can interact with Bool
]

::(:(Bool.not(value) type)) ~ Bool.not(::(:(ret_value ret_type))) {
	value = ret_value
	type = ~Bool
	#[ It returns a Boolean through its auxiliary port ]
	ret_type = Bool
}
Bool.not(x Bool) ~ Bool.true
Bool.not(x Bool) ~ Bool.false

#[ 
	Define the natural type
]
::(:(Nat.zero Nat)) ~ Nat.zero
::(:(Nat.succ(n) Nat)) ~ Nat.succ(::(:(n ~Nat)))

#[ 
	Define the ~Erasure "trait" or "interface"
	Era consumes erasable things, so it's of type ~Erasure

]
::(:(Era ~Erasure)) ~ Era

#[
	Bool implements Erasure
]
~Erasure ~ Bool
Era ~ Bool.true
Era ~ Bool.false


#[ Using Era ]

::(:(Bool.and(x y) ~Bool)) ~ Bool.and(::(:(x ~Bool)) ::(:(y Bool)))
Bool.and(x x) ~ Bool.true
Bool.and(Era Bool.false) ~ Bool.false

#[
	Duplication trait
]
::(:(Dup(a b) ~Duplication)) ~ Dup(a b)

~Duplication ~ Bool
Dup(Bool.true Bool.true) ~ Bool.true
Dup(Bool.false Bool.false) ~ Bool.false

#[
	Lists
]


::(:(v t)) ~ List.nil {
	v = List.nil
	t = List(Bot)
}

::(:(v t)) ~ List.cons(x xs) {
	x = ::(:(xv t0))
	xs = ::(:(xsv ~List(t1)))
	t0 = Dup(~(t1) t2)
	v = List.cons(xv xsv)
	t = List(t2)
}

::(:(v t)) ~ List.push(::(:(elem elemt)) ::(:(out outt)) ) {
	v = List.push(elem out)
	t = ~List(t1)
	elemt = Dup(~(t1) t2)
	outt = List(t2)
}

List.cons(x xs) ~ List.push(elem out) {
	xs = List.push(elem tail)
	out = List.cons(x tail)
}
List.nil ~ List.push(elem out) {
	out = List.cons(elem List.nil)
}

#[ This determines what the return type of DepTest is ]
::(:(DepTest.aux(x) ~Bool)) ~ DepTest.aux(::(:(x Type)))
DepTest.aux(Bool) ~ Bool.true
DepTest.aux(Nat) ~ Bool.false

::(:(v ~Bool)) ~ DepTest(::(:(r rt))) {
	Dup(v0 v1) = v
	v0 = DepTest(r)
	v1 = DepTest.aux(rt)
}

DepTest(Bool.false) ~ Bool.true
DepTest(Nat.zero) ~ Bool.false